package Array

//53. 最大子数组和
//给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
//子数组 是数组中的一个连续部分。
//==============================================
//贪心算法
//如果 -2 1 在一起，计算起点的时候，一定是从 1 开始计算，因为负数只会拉低总和.
//局部最优：当前“连续和”为负数的时候立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素 “连续和”只会越来越小。
//全局最优：选取最大“连续和”
//局部最优的情况下，并记录最大的“连续和”，可以推出全局最优。
//动态规划。。。。。。

func MaxSubArray(nums []int) int {
	n := len(nums)
	maxSum := nums[0]
	for i := 1; i < n; i++ {
		if nums[i-1] > 0 {
			nums[i] += nums[i-1] //利用数组存放最大子串的和（经典思路）
		}
		if nums[i] > maxSum {
			maxSum = nums[i]
		}
	}
	return maxSum
}
