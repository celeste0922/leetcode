package Array

import "fmt"

//80. 删除有序数组中的重复项 II
//给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。
//不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
//说明：
//为什么返回数值是整数，但输出的答案是数组呢？
//请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
//==============================================================================
//在循环中，每次执行两步，有两次出现则做两步，没有则做一步
//index为存储指针，i为检索指针
//====================优化=======================
//可以判断nums[i]==nums[index-2]是否成立，成立时i++，将一层循环的两步动作优化为一步

func RemoveDuplicatesII(nums []int) int {
	n := len(nums)
	index := 0
	for i := 0; i < n; {
		nums[index] = nums[i]
		index++
		i++
		if i > 0 && i < n && nums[i] == nums[i-1] {
			nums[index] = nums[i]
			flag := nums[i]
			index++
			i++
			for i < n && nums[i] == flag {
				i++
			}
		} else {
			continue
		}
	}
	nums = nums[:index]
	fmt.Println(nums)
	return len(nums)
}

//========================官方的双指针，更严谨====================
//因为给定数组是有序的，所以相同元素必然连续。我们可以使用双指针解决本题，遍历数组检查每一个元素是否应该被保留，
//如果应该被保留，就将其移动到指定位置。具体地，我们定义两个指针 slow和 fast 分别为慢指针和快指针，
//其中慢指针表示处理出的数组的长度，快指针表示已经检查过的数组的长度，
//即 nums[fast]表示待检查的第一个元素，nums[slow−1]为上一个应该被保留的元素所移动到的指定位置。
//因为本题要求相同元素最多出现两次而非一次，所以我们需要检查上上个应该被保留的元素 nums[slow−2]是否和当前待检查元素 nums[fast]相同。
//当且仅当 nums[slow−2]=nums[fast]时，当前待检查元素 nums[fast]不应该被保留
//（因为此时必然有 nums[slow−2]=nums[slow−1]=nums[fast]）。最后，slow即为处理好的数组的长度。
//特别地，数组的前两个数必然可以被保留，因此对于长度不超过2 的数组，我们无需进行任何处理，
//对于长度超过2的数组，我们直接将双指针的初始值设为2即可。
//============================================================================================================
//func removeDuplicates(nums []int) int {
//	n := len(nums)
//	if n <= 2 {
//		return n
//	}
//	slow, fast := 2, 2
//	for fast < n {
//		if nums[slow-2] != nums[fast] {
//			nums[slow] = nums[fast]
//			slow++
//		}
//		fast++
//	}
//	return slow
//}
