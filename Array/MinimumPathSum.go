package Array

//64. 最小路径和
//给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
//说明：每次只能向下或者向右移动一步。
//===================================
//由于路径的方向只能是向下或向右，因此网格的第一行的每个元素只能从左上角元素开始向右移动到达，
//网格的第一列的每个元素只能从左上角元素开始向下移动到达，
//此时的路径是唯一的，因此每个元素对应的最小路径和即为对应的路径上的数字总和。
//对于不在第一行和第一列的元素，可以从其上方相邻元素向下移动一步到达，或者从其左方相邻元素向右移动一步到达，
//元素对应的最小路径和等于其上方相邻元素与其左方相邻元素两者对应的最小路径和中的最小值加上当前元素的值。
//由于每个元素对应的最小路径和与其相邻元素对应的最小路径和有关，因此可以使用动态规划求解。

func MinPathSum(grid [][]int) int {
	x := len(grid[0])
	y := len(grid)
	for i := 1; i < x; i++ {
		grid[0][i] += grid[0][i-1]
	}
	for i := 1; i < y; i++ {
		grid[i][0] += grid[i-1][0]
	}
	for m := 1; m < y; m++ {
		for n := 1; n < x; n++ {
			grid[m][n] += min(grid[m][n-1], grid[m-1][n])
		}
	}
	return grid[y-1][x-1]
}

//func min(a int, b int) int {
//	if a < b {
//		return a
//	}
//	return b
//
//}
